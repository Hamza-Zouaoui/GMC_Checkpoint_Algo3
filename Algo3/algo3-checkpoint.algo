PROCEDURE dot_product(v1,v2: ARRAY_OF INTEGER, VAR ps: INTEGER)
VAR
    i:INTEGER;
BEGIN
    ps:=0;
    i:=0;
    IF (v1.length <> v2.length) THEN
        Write("vectors with different sizes");
        ps:=NaN;
    END_IF
    FOR i FROM 0 TO v1.length-1 STEP 1 DO
        ps:= ps + v1[i]*v2[i];
    END_FOR
    
END

ALGORITHM orthogonal_vectors
VAR
    v1,v2 : ARRAY_OF INTEGER[40];
    dot: INTEGER
BEGIN
REPEAT
    Write("v1 length")
    Read(n1)
UNTIL (n1 > 0)
    n2 := read_size();
    read_array(n1,v1);
    read_array(n2,v2);

    dot_product(v1,v2,dot);
    IF (dot = 0) THEN
        Write("V1 and V2 are orthogonal");
    ELSE
        Write("V1 and V2 are not orthogonal");
    END_IF
END

FUNCTION dot_product(v1,v2: ARRAY_OF INTEGER) : INTEGER
VAR
    i: INTEGER;
    ps: FLOAT;
BEGIN
    ps:=0;
    i:=0;
    IF (v1.length <> v2.length) THEN
        Write("vectors with different sizes");
        RETURN (NaN);
    END_IF
    FOR i FROM 0 TO v1.length-1 STEP 1 DO
        ps:= ps + v1[i]*v2[i];
    END_FOR
    RETURN (ps);
END

ALGORITHM orthogonal_vectors
VAR
    v1,v2 : ARRAY_OF INTEGER[40];
    dot: INTEGER;
BEGIN
    n1 := read_size();
    n2 := read_size();
    read_array(n1,v1);
    read_array(n2,v2);
    dot:= dot_product(v1,v2)
    dot_product(v1,v2);
    IF (ps = 0) THEN
        Write("V1 and V2 are orthogonal");
    ELSE
        Write("V1 and V2 are not orthogonal");
    END_IF
END